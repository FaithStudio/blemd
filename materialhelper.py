import bpy


def add_material(obj, mat):
    is_in = False
    for m2 in obj.data.materials:
        if mat == m2:
            is_in = True
            break
    if not is_in:
        obj.data.materials.append(mat)
    for num, com in enumerate(obj.material_slots):
        if com.material == mat:
            return num
    raise ValueError("material not successfully added")
    #act_bk = bpy.context.active_object
    #bpy.context.scene.objects.active = obj
    #num = len(obj.material_slots)
    #bpy.ops.object.material_slot_add()
    #mat_slot = obj.material_slots[num]
    #mat_slot.material = mat
    #bpy.context.scene.objects.active = act_bk


def add_vcolor(mesh, color_layer):
    return  # XCX debug that later
    #num = len(mesh.vertex_colors)
    #act_bk = bpy.context.active_object
    #bpy.context.scene.objects.active = mesh
    #bpy.ops.mesh.vertex_color_add()
    #vx_layer = mesh.vertex_colors[num]
    #bpy.context.scene.objects.active = act_bk
    vx_layer = mesh.vertex_colors.new("v_color_"+str(len(mesh.vertex_colors)))

    l_to_v = []
    for com in mesh.loops:
        l_to_v.append(com.vertex_index)

    # --if (self.vtx.colors.count > 1) then
    # --	raise ValueError(("self.vtx.colors.count = " + (self.vtx.colors[1].count as string))

    # --if (self.vtx.colors[1].count > 1) then
    # --	raise ValueError(("self.vtx.colors[1].count = " + (self.vtx.colors[1].count as string))
    # --setNumCPVVerts mesh self.vtx.colors[1].count
    #meshop.setNumMapVerts(mesh, 0, len(color_layer))  #XCX
    #meshop.setNumMapVerts(mesh, -2, len(color_layer))  #XCX

    for i in range(len(l_to_v)):  # fixed
        # --setVertColor mesh i vtx.colors[1][i]
        vx_layer[i].data.color = color_layer[l_to_v[i]]  # XCX
        # meshop.setVertAlpha(mesh, -2, i, color_layer[i].a)  # XCX


    # --buildVCFaces mesh False
    # meshop.buildMapFaces(mesh, 0)  # XCX
    # meshop.buildMapFaces(mesh, -2)  # XCX

    # faces generated by blender
    #for i in range(len(self.vcFaces)):
    #    if self.vcFaces[i] is not None:  # -- check not needed?
    #        pass
    #        # --messageBox "Vertex color error"
    #        # --throw "Vertex color error"
    #        # --setVCFace mesh i vcFaces[i][1] vcFaces[i][2] vcFaces[i][3]
    #        meshop.setMapFace(mesh, 0, i, [vcFaces[i][0], vcFaces[i][1], vcFaces[i][2]]) # XCX
    #        meshop.setMapFace(mesh, -2, i, [vcFaces[i][0], vcFaces[i][1], vcFaces[i][2]]) # XCX


    # modelMesh.showVertexColors = True # -- display verself.tex shading  # XCX